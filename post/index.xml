<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on PSYMON</title>
    <link>https://devpsymon.github.io/post/</link>
    <description>Recent content in Posts on PSYMON</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>kr-ko</language>
    <managingEditor>seongyeol.dev@gmail.com (PSYMON)</managingEditor>
    <webMaster>seongyeol.dev@gmail.com (PSYMON)</webMaster>
    <lastBuildDate>Tue, 10 Mar 2020 15:55:12 +0900</lastBuildDate>
    
	<atom:link href="https://devpsymon.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>C&#43;&#43; 타원피팅 사용하기</title>
      <link>https://devpsymon.github.io/post/c&#43;&#43;-%ED%83%80%EC%9B%90%ED%94%BC%ED%8C%85-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</link>
      <pubDate>Tue, 10 Mar 2020 15:55:12 +0900</pubDate>
      <author>seongyeol.dev@gmail.com (PSYMON)</author>
      <guid>https://devpsymon.github.io/post/c&#43;&#43;-%ED%83%80%EC%9B%90%ED%94%BC%ED%8C%85-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</guid>
      <description>개발을 진행하다 보면 산재한 데이터를 하나의 공식으로 표현해야 하는 경우가 많이 생긴다. 예를 들면 이미지의 특징점들을 연결한다거나, 불규칙해 보이는 실험값들을 근사한다거나 하는 일들 말이다. 이때 유용하게 쓸만한 것이 타원피팅(Ellipse Fitting)이다. 구현도 어렵지 않기 때문에 요새는 일단 원과 비슷해 보이면 한번 적용해보는 정도로 자주 쓰고 있다.
최소자승법을 활용한 피팅 주어진 데이터들로 하나의 방정식을 만드는 가장 쉬운 방법은 최소자승법을 이용하는 것이다. 자승이라는 단어가 익숙하지 않다면 최소제곱법이라고 불러도 무방하다. 최소제곱법이라는 단어에서 알 수 있듯 우리는 무언가를 제곱했을 때 최소가 되는 방정식을 찾을 것이다.</description>
    </item>
    
    <item>
      <title>신학전공 개발자의 개발 입문기</title>
      <link>https://devpsymon.github.io/post/%EC%8B%A0%ED%95%99%EC%A0%84%EA%B3%B5-%EA%B0%9C%EB%B0%9C%EC%9E%90%EC%9D%98-%EA%B0%9C%EB%B0%9C%EC%9E%85%EB%AC%B8%EA%B8%B0/</link>
      <pubDate>Mon, 10 Feb 2020 16:36:26 +0900</pubDate>
      <author>seongyeol.dev@gmail.com (PSYMON)</author>
      <guid>https://devpsymon.github.io/post/%EC%8B%A0%ED%95%99%EC%A0%84%EA%B3%B5-%EA%B0%9C%EB%B0%9C%EC%9E%90%EC%9D%98-%EA%B0%9C%EB%B0%9C%EC%9E%85%EB%AC%B8%EA%B8%B0/</guid>
      <description>이미 제목에서 밝혔지만 나는 흔히 말하는 비전공 출신 개발자다. 물론 요즘은 워낙 비전공 개발자가 많다 보니 특별한 이력은 아니지만, 굳이 학문적 유사성을 따진다면 신학과 컴퓨터공학은 양끝단에 있지 않나 싶다. 뇌피셜
그러나 일반적 기대와 달리 이 글의 성격은 &amp;ldquo;당신도 이렇게 하면 개발자가 될 수 있다!&amp;rdquo; 라거나 &amp;ldquo;고난과 역경을 극복한 비전공 개발자의 성공기&amp;rdquo; 같은 거창한 것은 아니다. 굳이 따지자면 담백하게 소개하는 전직 요약기 정도가 적당하다.
담백한 요약의 정석
1. 신학교와 편집기자 나는 2011년부터 2017년까지 신학교에서 신학을 전공했다.</description>
    </item>
    
  </channel>
</rss>